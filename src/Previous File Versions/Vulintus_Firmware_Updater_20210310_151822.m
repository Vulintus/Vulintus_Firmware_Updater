function Vulintus_Firmware_Updater(varargin)

[port, description] = Scan_COM_Ports('Checking for Vulintus devices');       %Scan the COM ports.

if isempty(port)                                                            %If no serial ports were found...
    errordlg(['ERROR: No Vulintus devices were detected connected to '...
        'this computer.'],'No Devices Detected!');                          %Show an error in a dialog box.
    return                                                                  %Skip execution of the rest of the function.
end

ui_h = 0.7;                                                                 %Set the height for all buttons, in centimeters.
fig_w = 15;                                                                 %Set the width of the figure, in centimeters.
ui_sp = 0.1;                                                                %Set the space between uicontrols, in centimeters.
fig_h = 6*ui_sp + 7*ui_h;                                                   %Calculate the height of the figure.
set(0,'units','centimeters');                                               %Set the screensize units to centimeters.
pos = get(0,'ScreenSize');                                                  %Grab the screensize.
pos = [pos(3)/2-fig_w/2, pos(4)/2-fig_h/2, fig_w, fig_h];                   %Scale a figure position relative to the screensize.
fig = figure('units','centimeters',...
    'Position',pos,...
    'resize','off',...
    'MenuBar','none',...
    'name','Vulintus Firmware Updater',...
    'numbertitle','off');                                                   %Set the properties of the figure.
prog_btn = uicontrol(fig,'style','pushbutton',...
    'String','PROGRAM',...
    'units','centimeters',...    
    'position',[ui_sp, fig_h - 4*ui_h - 4*ui_sp, fig_w - 2*ui_sp, ui_h],...
    'fontweight','bold',...
    'fontsize',12,...
    'enable','off');                                                        %Make a program button.
uicontrol(fig,'style','edit',...
    'String','COM Port: ',...
    'units','centimeters',...    
    'position',[ui_sp, fig_h - ui_h - ui_sp, 3, ui_h],...
    'fontweight','bold',...
    'fontsize',12,...
    'enable','inactive',...
    'horizontalalignment','right',...
    'backgroundcolor',[0.9 0.9 1]);                                         %Make a label for the port.
port_pop = uicontrol(fig,'style','popupmenu',...
    'String',description,...
    'userdata',port,...
    'units','centimeters',...    
    'position',[3 + 2*ui_sp, fig_h - ui_h - ui_sp, 10, ui_h],...
    'fontweight','bold',...
    'fontsize',12,...
    'enable','on');                                                         %Make a port pop-up menu.
rescan_btn = uicontrol(fig,'style','pushbutton',...
    'String','SCAN',...
    'units','centimeters',...    
    'position',[13 + 3*ui_sp, fig_h - ui_h - ui_sp, fig_w - 4*ui_sp - 13, ui_h],...
    'fontweight','bold',...
    'fontsize',12,...
    'enable','on');                                                         %Make a port pop-up menu.
uicontrol(fig,'style','edit',...
    'String','HEX/BIN File: ',...
    'units','centimeters',...    
    'position',[ui_sp, fig_h - 2*ui_h - 2*ui_sp, 3, ui_h],...
    'fontweight','bold',...
    'fontsize',12,...
    'enable','inactive',...
    'horizontalalignment','right',...
    'backgroundcolor',[0.9 0.9 1]);                                         %Make a label for the hex file.
uicontrol(fig,'style','edit',...
    'String','Programmer: ',...
    'units','centimeters',...    
    'position',[ui_sp, fig_h - 3*ui_h - 3*ui_sp, 3, ui_h],...
    'fontweight','bold',...
    'fontsize',12,...
    'enable','inactive',...
    'horizontalalignment','right',...
    'backgroundcolor',[0.9 0.9 1]);                                         %Make a label for the programmer.
prog_pop = uicontrol(fig,'style','popupmenu',...
    'String',{'avrdude.exe','bossac.exe'},...
    'units','centimeters',...    
    'position',[3 + 2*ui_sp, fig_h - 3*ui_h - 3*ui_sp, fig_w - 3*ui_sp - 3, ui_h],...
    'fontweight','bold',...
    'fontsize',12,...
    'enable','on');                                                         %Make a programmer pop-up menu.
msgbox = uicontrol(fig,'style','listbox',...
    'enable','inactive',...
    'string',{},...
    'units','centimeters',...
    'position',[ui_sp, ui_sp, fig_w - 2*ui_sp, 3*ui_h],...
    'fontweight','bold',...
    'fontsize',10,...
    'min',0,...
    'max',2,...
    'value',[],...
    'backgroundcolor','w');                                                 %Make a listbox for displaying messages to the user.
file_edit = uicontrol(fig,'style','edit',...
    'String','(click to select)',...
    'units','centimeters',...    
    'position',[3 + 2*ui_sp, fig_h - 2*ui_h - 2*ui_sp, fig_w - 3*ui_sp - 3, ui_h],...
    'fontweight','bold',...
    'fontsize',12,...
    'enable','inactive',...
    'horizontalalignment','left',...
    'buttondownfcn',{@Set_Hex_File,prog_btn});                              %Make clickable editbox for the hex file.
set(prog_btn,'callback',...
    {@Program_Vulintus_Device, port_pop, file_edit, prog_pop, msgbox});     %Set the program button callback.
set(rescan_btn,'callback',...
    {@Rescan_COM_Ports, port_pop, file_edit, prog_pop, msgbox});            %Set the program button callback.
Add_Msg(msgbox,'Select a COM port and hex file to start.');                 %Add a message to the message box.


function Rescan_COM_Ports(hObject, ~, port_pop, file_edit, prog_pop, msgbox)
set([hObject, port_pop, file_edit, prog_pop],'enable','off');               %Disable all uicontrols.
Add_Msg(msgbox,'Re-scanning COM ports...');                                 %Show a message in the messagebox.
[port, description] = Scan_COM_Ports('Re-scanning COM ports...');           %Re-scan the COM ports.
set(port_pop,'String',description,...
    'userdata',port);                                                       %Update the port pop-up menu.
set([hObject, port_pop, file_edit, prog_pop],'enable','on');                %Enable all uicontrols.


function Program_Vulintus_Device(hObject, ~, port_pop, file_edit, prog_pop, msgbox)
Clear_Msg(msgbox);                                                          %Clear the message.
set([hObject, port_pop, file_edit, prog_pop],'enable','off');               %Disable all uicontrols.
temp = port_pop.UserData;                                                   %Grab the user data from the port pop-up menu.
port = temp{port_pop.Value};                                                %Grab the name of the selected COM port.
file = file_edit.UserData;                                                  %Grab the hex filename from the file editbox user data.
temp = prog_pop.String;                                                     %Grab the string from the programmer pop-up menu.
programmer = temp{prog_pop.Value};                                          %Grab the name of the selected COM port.
switch programmer                                                           %Switch between teh programmers.
    case 'avrdude.exe'                                                      %If we're using avrdude...
        if ~exist(fullfile(pwd,programmer),'file') || ...
                ~exist(fullfile(pwd, 'avrdude.conf'),'file')                %If avrdude.exe or it's configuration file aren't found...
            errordlg(sprintf(['ERROR: Could not find programmer %s or '...
                'associated files in the current directory.'],...
                programmer),...
                'Required Programming Files Not Found!');                   %Show an error in a dialog box.
            close(hObject.Parent);                                          %Close the figure.
            return                                                          %Skip execution of the function.
        end
        cmd = ['"' fullfile(pwd,programmer) '" '...                         %avrdude.exe location
            '-C"' fullfile(pwd,'avrdude.conf') '" '...                      %avrdude.conf location
            '-patmega328p '...                                              %microcontroller type
            '-carduino '...                                                 %arduino programmer
            '-P' port ' '...                                                %port
            '-b115200 '...                                                  %baud rate
            '-D '...                                                        %disable erasing the chip
            '-Uflash:w:"' file '":i'];                                      %hex file name.
    case 'bossac.exe'                                                       %If we're using bossac...
        if ~exist(fullfile(pwd,programmer),'file') || ...
                ~exist(fullfile(pwd, 'avrdude.conf'),'file')                %If avrdude.exe or it's configuration file aren't found...
            errordlg(sprintf(['ERROR: Could not find programmer %s or '...
                'associated files in the current directory.'],...
                programmer),...
                'Required Programming Files Not Found!');                   %Show an error in a dialog box.
            close(hObject.Parent);                                          %Close the figure.
            return                                                          %Skip execution of the function.
        end
        Add_Msg(msgbox,'Attempting programming reset...');                  %Show a message in the messagebox.
        serialcon = serialport(port,1200);                                  %Set up the serial connection on the specified port.
        pause(10);                                                          %Pause for 10 milliseconds.
        delete(serialcon);                                                  %Delete the serial object.
        temp_port = instrhwinfo('serial');                                  %Grab information about the available serial ports.
        temp_port = temp_port.SerialPorts;                                  %Save the list of all serial ports regardless of whether they're busy.
        key = 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum\USB\';      %Set the registry query field.
        [~, txt] = ...
            dos(['REG QUERY ' key ' /s /f "FriendlyName" /t "REG_SZ"']);    %Query the registry for all USB devices.
        checker = zeros(numel(temp_port),1);                                %Create a check matrix to identify Arduino Unos.
        for i = 1:numel(temp_port)                                          %Step through each port name.
            j = strfind(txt,['(' temp_port{i} ')']);                        %Find the port in the USB device list.    
            if ~isempty(j)                                                  %If a matching port was found...
                k = strfind(txt(1:j),'    ');                               %Find all quadruple spaces preceding the port.
                type = txt(k(end)+4:j-2);                                   %Grab the description.
                if strcmpi(type,'Arduino Zero bootloader')                  %If an Arduino Zero bootloader was found...
                    checker(i) = 1;                                         %Mark this port for upload.
                end
            end
        end
        if any(checker == 1)                                                %If an upload port was found...
            temp_port = temp_port(checker == 1);                            %Kick out all non-upload ports.
            Add_Msg(msgbox,sprintf('Upload port found: %s...',...
                temp_port{1}));                                             %Show a message in the messagebox.
        else                                                                %Otherwise...
            Add_Msg(msgbox,['Arduino Zero didn''t reset! No upload port '...
                'found']);                                                  %Show a message in the messagebox.
        end
        cmd = ['"' fullfile(pwd,programmer) '" '...                         %bossac.exe location
            '-i '...                                                        %Display diagnostic information about the device.
            '-d '...                                                        %Print verbose diagnostic messages
            '--port=' temp_port{1} ' '...                                           %Set the COM port.
            '-U true '...                                                   %Disable automatic COM port detection.
            '-e '...                                                        %Erase the target's flash memory before writing.
            '-w '...                                                        %Write the file to the target's flash memory.
            '-v '...                                                        %Verify the file matches the contents after writing.
            '"' file '" '...                                                %Set the file.
            '-R'];                                                          %Reset the microcontroller after writing the flash.
end
clc;                                                                        %Clear the command line.
cprintf('*blue','\n%s\n',cmd);                                              %Print the command in bold green.
[~, short_file, ext] = fileparts(file);                                     %Grab the file minus the path.
Add_Msg(msgbox,sprintf('Uploading: %s%s...', short_file, ext));             %Show a message in the messagebox.
[status, ~] = dos(cmd,'-echo');                                             %Execute the command in a dos prompt, showing the results.
Clear_Msg(msgbox);                                                          %Clear the message.
if status == 0                                                              %If the command was successful...
    Add_Msg(msgbox,'Microcode successfully updated!');                      %Show a success message in the messagebox.    
else                                                                        %Otherwise...
    Add_Msg(msgbox,'Microcode update failed!');                             %Show a failure message in the messagebox.    
end
[port, description] = Scan_COM_Ports('Re-scanning COM ports...');           %Re-scan the COM ports.
set(port_pop,'String',description,...
    'userdata',port);                                                       %Update the port pop-up menu.
set([hObject, port_pop, file_edit, prog_pop],'enable','on');                %Enable all uicontrols.


function Set_Hex_File(hObject, ~, prog_btn)
[file, path] = uigetfile('*.hex;*.bin');                                    %Have the user select a hex file.
if file(1) == 0                                                             %If the user didn't select a file.
    return
end
hObject.UserData = [path file];                                             %Save the filename with path.
hObject.String = file;                                                      %Set the editbox string to the filename.
prog_btn.Enable = 'on';                                                     %Enable the program button.


function [port, description] = Scan_COM_Ports(str)

waitbar = big_waitbar('title',str,...
    'string','Detecting serial ports...',...
    'value',0.25);                                                          %Create a waitbar figure.

port = instrhwinfo('serial');                                               %Grab information about the available serial ports.
if isempty(port)                                                            %If no serial ports were found...
    errordlg(['ERROR: No Vulintus devices were detected connected to '...
        'this computer.'],'No Devices Detected!');                          %Show an error in a dialog box.
    return                                                                  %Skip execution of the rest of the function.
end
busyports = setdiff(port.SerialPorts,port.AvailableSerialPorts);            %Find all ports that are currently busy.
port = port.SerialPorts;                                                    %Save the list of all serial ports regardless of whether they're busy.

if waitbar.isclosed()                                                       %If the user closed the waitbar figure...
    return                                                                  %Skip execution of the rest of the function.
end
waitbar.string('Identifying Vulintus devices...');                          %Update the waitbar text.
waitbar.value(0.50);                                                        %Update the waitbar value.

description = cell(size(port));                                             %Create a cell array to hold the port description.
key = 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum\USB\';              %Set the registry query field.
[~, txt] = dos(['REG QUERY ' key ' /s /f "FriendlyName" /t "REG_SZ"']);     %Query the registry for all USB devices.
checker = zeros(numel(port),1);                                             %Create a check matrix to identify Arduino Unos.
for i = 1:numel(port)                                                       %Step through each port name.
    j = strfind(txt,['(' port{i} ')']);                                     %Find the port in the USB device list.    
    if ~isempty(j)                                                          %If a matching port was found...
        k = strfind(txt(1:j),'    ');                                       %Find all quadruple spaces preceding the port.
        description{i} = txt(k(end)+4:j-2);                                 %Grab the description.
    end
end
busyports = intersect(port,busyports);                                      %Kick out all non-Vulintus devices from the busy ports list.

if waitbar.isclosed()                                                       %If the user closed the waitbar figure...
    return                                                                  %Skip execution of the rest of the function.
end
waitbar.close();                                                            %Close the waitbar.

for i = 1:numel(port)                                                       %Step through each remaining port.
    description{i} = horzcat(port{i}, ': ', description{i});                %Add the COM port to each descriptions.
    if ~isempty(busyports) && any(strcmpi(port{i},busyports))               %If the port is busy...
        description{i} = horzcat(description{i}, ' (busy)');                %Add a busy indicator.
    end
end